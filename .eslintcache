[{"C:\\wamp\\www\\settlerswarlords\\src\\reportWebVitals.js":"1","C:\\wamp\\www\\settlerswarlords\\src\\App.js":"2","C:\\wamp\\www\\settlerswarlords\\src\\DanInput.jsx":"3","C:\\wamp\\www\\settlerswarlords\\src\\comp_account.jsx":"4","C:\\wamp\\www\\settlerswarlords\\src\\comp_ErrorOverlay.jsx":"5","C:\\wamp\\www\\settlerswarlords\\src\\DanCommon.js":"6","C:\\wamp\\www\\settlerswarlords\\src\\comp_localMap.jsx":"7","C:\\wamp\\www\\settlerswarlords\\src\\comp_worldMap.jsx":"8","C:\\wamp\\www\\settlerswarlords\\src\\index.js":"9","C:\\wamp\\www\\settlerswarlords\\src\\comp_admin.jsx":"10","C:\\wamp\\www\\settlerswarlords\\src\\DanAjax.js":"11"},{"size":362,"mtime":1610251335559,"results":"12","hashOfConfig":"13"},{"size":19938,"mtime":1614048601087,"results":"14","hashOfConfig":"13"},{"size":2449,"mtime":1613041486434,"results":"15","hashOfConfig":"13"},{"size":8793,"mtime":1613169685400,"results":"16","hashOfConfig":"13"},{"size":2326,"mtime":1611446857039,"results":"17","hashOfConfig":"13"},{"size":2382,"mtime":1610580234395,"results":"18","hashOfConfig":"13"},{"size":20236,"mtime":1613169698928,"results":"19","hashOfConfig":"13"},{"size":22783,"mtime":1613860075232,"results":"20","hashOfConfig":"13"},{"size":500,"mtime":1610251335559,"results":"21","hashOfConfig":"13"},{"size":21193,"mtime":1613179296047,"results":"22","hashOfConfig":"13"},{"size":2141,"mtime":1611446941675,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"z4qb3y",{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"37","messages":"38","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},"C:\\wamp\\www\\settlerswarlords\\src\\reportWebVitals.js",[],"C:\\wamp\\www\\settlerswarlords\\src\\App.js",[],"C:\\wamp\\www\\settlerswarlords\\src\\DanInput.jsx",[],"C:\\wamp\\www\\settlerswarlords\\src\\comp_account.jsx",[],["48","49"],"C:\\wamp\\www\\settlerswarlords\\src\\comp_ErrorOverlay.jsx",[],"C:\\wamp\\www\\settlerswarlords\\src\\DanCommon.js",[],"C:\\wamp\\www\\settlerswarlords\\src\\comp_localMap.jsx",["50","51"],"// component - LocalMap.jsx\r\n// Provides an interface for users to interact with the map local to where the player is located\r\n// for the game Settlers & Warlords\r\n\r\nimport React from \"react\";\r\nimport { DAX } from \"./DanAjax.js\";\r\nimport { serverURL, imageURL, PageChoices } from \"./App.js\";\r\nimport { DanInput } from \"./DanInput.jsx\";\r\nimport { ErrorOverlay} from \"./comp_ErrorOverlay.jsx\";\r\n\r\nexport function localMap_fillFromServerData(mapContent) {\r\n    // Handles a bit of processing for the local map\r\n    // mapContent - data received from the server\r\n    // Returns an updated package of map content\r\n\r\n    // We basically need to attach any active processes - and items of those processes - to the building instance\r\n    mapContent.minimap = mapContent.minimap.map(tile => {\r\n        if(tile.buildid==0) return tile;  // Nothing to update here\r\n        tile.process = mapContent.processes.find(process => process.buildingId===tile.buildid); // This will either hold data or be null\r\n        if(tile.process!==null && typeof tile.process !== 'undefined') {\r\n            // Find any items for inputGroup, and attach the current quantity and calculated production rate\r\n            if(tile.process.inputGroup!==null && typeof tile.process.inputGroup !== 'undefined') {\r\n                tile.process.inputGroup = tile.process.inputGroup.map(root => {\r\n                    let pickup = mapContent.items.find(item => item.name===root.name);\r\n                    if(pickup===null) return root;\r\n                    root.onHand = pickup.amount;\r\n                    root.production = pickup.production-pickup.consumption;\r\n                    return root;\r\n                });\r\n            }else{\r\n                tile.process.inputGroup = 0;  // We can check for 0 later, but not for undefined\r\n            }\r\n            // Do the same for outputGroup\r\n            if(tile.process.outputGroup!==null && typeof tile.process.outputGroup !== 'undefined') {\r\n                tile.process.outputGroup = tile.process.outputGroup.map(root => {\r\n                    let pickup = mapContent.items.find(item => item.name===root.name);\r\n                    if(pickup===null) return root;\r\n                    root.onHand = pickup.amount;\r\n                    root.production = pickup.production-pickup.consumption;\r\n                    return root;\r\n                });\r\n            }else{\r\n                tile.process.outputGroup = 0;\r\n            }\r\n        }\r\n        return tile;\r\n    });\r\n    return mapContent;\r\n}\r\n\r\nexport function LocalMap(props) {\r\n    // Handles displaying local map content, along with buildings and their options on the right side\r\n    // prop fields - data\r\n    //      localMap - full map content as received from the server. Note that this will contain all events in an events structure now\r\n    // prop fields - functions\r\n    //      setPage      - handles changing the selected page. Only passed to TabPicker\r\n    //      onTileUpdate - handles any map tiles that have been updated\r\n\r\n    // minimap images could be global later, but for now we only need them here\r\n    const minimapImages = [\"emptygrass.jpg\", \"pinetreetwo.jpg\", \"smallpond.jpg\", \"desert.jpg\", \"smallpond.jpg\", \"basicrock.jpg\", \"basicore.jpg\"];\r\n    const [detailed, setDetailed] = React.useState(null); // which square is selected to show details on the right\r\n\r\n    return (\r\n        <div>\r\n            <span style={{ margin: 10 }}>Biome: {props.localMap.biome}</span>\r\n            <span style={{ margin: 10 }}>Population: {props.localMap.population}</span>\r\n            <PageChoices selected={\"localmap\"} onPagePick={props.setPage} />\r\n            <div style={{ width: \"100%\", position: \"relative\" }}>\r\n                {props.localMap.minimap.map((square, key) => {\r\n                    // Before trying to display this tile, determine if there is any active construction going on\r\n                    let hasConstruction = 0;\r\n                    if(parseInt(square.buildid)!==0) {\r\n                        props.localMap.events.find(eve => {\r\n                            if(eve.task === 'BuildingUpgrade') {\r\n                                let details = JSON.parse(eve.detail);\r\n                                if(details.buildid===square.buildid) {\r\n                                    hasConstruction=1;\r\n                                    return true;\r\n                                }\r\n                            }\r\n                            return false;\r\n                        });\r\n                    }\r\n                    \r\n                    return (\r\n                        <div\r\n                            style={{\r\n                                display: \"block\",\r\n                                position: \"absolute\",\r\n                                width: 55,\r\n                                height: 55,\r\n                                top: square.y * 55,\r\n                                left: square.x * 55,\r\n                                backgroundImage: \"url(\" + imageURL + minimapImages[square.landtype] + \")\",\r\n                                cursor: \"pointer\",\r\n                            }}\r\n                            key={key}\r\n                            onClick={() => setDetailed(square)}\r\n                        >\r\n                            {parseInt(square.buildid) === 0 ? (\r\n                                \"\"\r\n                            ) : (\r\n                                <div>\r\n                                    <img src={imageURL + square.buildType.image} alt={\"building\"} style={{ pointerEvents: \"none\" }} />\r\n                                    {hasConstruction === 0 ? (\r\n                                        \"\"\r\n                                    ) : (\r\n                                        <img\r\n                                            src={imageURL + \"construction.png\"}\r\n                                            alt={\"under construction\"}\r\n                                            style={{ pointerEvents: \"none\", position: \"absolute\", top: 0, left: 0 }}\r\n                                        />\r\n                                    )}\r\n                                </div>\r\n                            )}\r\n                        </div>\r\n                    );\r\n                })}\r\n            </div>\r\n            <div style={{ position: \"absolute\", left: 500 }}>\r\n                {detailed === null ? (\r\n                    \"Click a tile to view options\"\r\n                ) : parseInt(detailed.buildid) === 0 ? (\r\n                    <EmptyLandShowBuildChoices\r\n                        landType={detailed.landtype}\r\n                        buildTypes={props.localMap.buildoptions}\r\n                        onTileUpdate={props.onTileUpdate}\r\n                        x={detailed.x}\r\n                        y={detailed.y}\r\n                    />\r\n                ) : (\r\n                    <LocalTileBuildingDetail tile={detailed} />\r\n                )}\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nfunction EmptyLandShowBuildChoices(props) {\r\n    // List building types that can be built here, allowing the user to select one to build\r\n    // prop fields\r\n    //      landType - land ID of the selected land. Helps determine what can be built at this location\r\n    //      buildTypes - list of all the buildings available to the player. This is received from the server as a buildoptions array\r\n    //      onTileUpdate - callback function to handle updating tiles when received from the server\r\n    //      x - X coordinate on the localmap of this tile. Only used for sending data to the server\r\n    //      y - Y coordinate\r\n\r\n    const [selected, setSelected] = React.useState(null);\r\n\r\n    function buildStructure(buildName) {\r\n        // Allows the user to start construction of a given building\r\n        // buildingName - name of the building to start building here\r\n\r\n        // The build of this will be fetching data from the server\r\n        fetch(serverURL, DAX.serverMessage(\"addbuilding\", { name: buildName, localx: props.x, localy: props.y }, true))\r\n            .then((res) => DAX.manageResponseConversion(res))\r\n            .catch((err) => console.log(err))\r\n            .then((data) => {\r\n                if (data.result !== \"success\") {\r\n                    console.log(\"Server reported error\", data);\r\n                    return;\r\n                }\r\n                props.onTileUpdate([data.newmaptile]);\r\n            });\r\n    }\r\n\r\n    function LandDescription() {\r\n        // Provides a basic description of the land on this selected tile\r\n        // landType - ID of the land type. This should be provided by props.landType\r\n\r\n        switch (props.landType) {\r\n            case 0:\r\n                return <p>Grassland. Excellent for new construction and farming</p>;\r\n            case 1:\r\n                return <p>Forest. Best source of wood and other materials</p>;\r\n            case 2:\r\n                return <p>Swamp area. Not very useful</p>;\r\n            case 3:\r\n                return <p>Desert. Hot and hard to build on</p>;\r\n            case 4:\r\n                return <p>Open water. A vital resource for life</p>;\r\n            case 5:\r\n                return <p>Exposed rock. Easy source of stone materials and building on</p>;\r\n            case 6:\r\n                return <p>Exposed ore. Easy mineral access</p>;\r\n            default:\r\n                return <p>Land type {props.landId} has not been coded yet</p>;\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            {LandDescription()}\r\n            <p className=\"singleline\">Nothing is built here. Choose an option below</p>\r\n            {props.buildTypes.map((ele, key) => {\r\n                // First, filter out the land types. Our 'data package' receives land types as a comma-delimited string, so we first\r\n                // have to convert that for each building type.\r\n                let landTypes = ele.landtype.split(\",\").map((rev) => parseInt(rev));\r\n                //console.log(\"Landtypes (\" + props.landType + \"): \", landTypes);\r\n                if (!landTypes.includes(props.landType)) return;\r\n                return (\r\n                    <div key={key}>\r\n                        {ele === selected ? (\r\n                            <div style={{ border: \"1px solid green\", textAlign: \"center\" }}>\r\n                                {ele.name}\r\n                                <p>{ele.description}</p>\r\n                                {/* Show construction time, if there is any */}\r\n                                {ele.buildtime === 0 ? \"\" : <p className=\"singleline\">Construction time: {ele.buildtime} seconds</p>}\r\n                                <p className=\"singleline\" style={{ textAlign: \"center\" }}>\r\n                                    <span className=\"fakelink\" onClick={() => buildStructure(ele.name)}>\r\n                                        Build\r\n                                    </span>\r\n                                </p>\r\n                            </div>\r\n                        ) : (\r\n                            <p className=\"singleline\" style={{ fontWeight: \"bold\", cursor: \"pointer\" }} onClick={() => setSelected(ele)}>\r\n                                {ele.name}\r\n                            </p>\r\n                        )}\r\n                    </div>\r\n                );\r\n            })}\r\n        </div>\r\n    );\r\n}\r\n\r\nfunction LocalTileBuildingDetail(props) {\r\n    // Shows cnotent on the right about the selected building.\r\n    // Components that use this component: LocalMap\r\n    // prop fields - data\r\n    //     tile - object containing all the data about the building to show\r\n\r\n    const [pickedAction, setPickedAction] = React.useState(null);\r\n    const [actionWorkers, setActionWorkers] = React.useState(1);\r\n    const [priority, setPriority] = React.useState(1);\r\n    const [errorContent, setErrorContent] = React.useState('');\r\n\r\n    // When this gets updated with new content, we need to refresh some choices\r\n    React.useEffect(() => {\r\n        return () => {\r\n            setPickedAction(null);\r\n            setPriority(1);\r\n        };\r\n    }, [props.tile]);\r\n\r\n    console.log('Props provided:', props);\r\n\r\n    function changeActionWorkers(f, value) {\r\n        setActionWorkers(value);\r\n    }\r\n\r\n    function changePriority() {\r\n        console.log(\"Code has been ran!\");\r\n        fetch(serverURL, DAX.serverMessage(\"setpriority\", { buildid: props.tile.building.id, priority: priority }, true))\r\n            .then((res) => DAX.manageResponseConversion(res))\r\n            .catch((err) => console.log(err))\r\n            .then((data) => {\r\n                if (data.result !== \"success\") {\r\n                    console.log(\"Error in priority update\", data);\r\n                    return;\r\n                }\r\n                console.log(\"Priority updated successfully\");\r\n            });\r\n    }\r\n\r\n    function startAction(actionName) {\r\n        // Handles allowing a user to start a given action.\r\n        console.log(\"Using building data:\", props.tile.building);\r\n        fetch(\r\n            serverURL,\r\n            DAX.serverMessage(\"addprocess\", { buildid: props.tile.building.id, process: actionName, workers: actionWorkers, tomake: 0 }, true)\r\n        )\r\n            .then((res) => DAX.manageResponseConversion(res))\r\n            .catch((err) => console.log(err))\r\n            .then((data) => {\r\n                if (data.result !== \"success\") {\r\n                    console.log(\"Error in adding action:\", data);\r\n                    setErrorContent(data.message);\r\n                    return;\r\n                }\r\n                // Now, we... well, I don't know what to do now\r\n            });\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <p>\r\n                <span style={{fontWeight:\"bold\", marginRight:20}}>{props.tile.buildType.name}</span>\r\n                <span style={{ marginRight: 20}}>Dev level: {props.tile.building.devlevel}</span>\r\n                <span>Fort level: {props.tile.building.fortlevel}</span>\r\n            </p>\r\n            <p>{props.tile.buildType.description}</p>\r\n            {/*If there is an active process for this building, show it here */}\r\n            {typeof props.tile.process === 'undefined' ? (\r\n                <p>No activity</p>\r\n            ):(\r\n                <div>\r\n                    <p className=\"singleline\" style={{textAlign: 'center', fontWeight:'bold'}}>\r\n                        Current Activity:\r\n                    </p>\r\n                    <div style={{ justifyContent:'center', display:'flex', marginRight:20}}>\r\n                        {/* Show the name of this process */}\r\n                        <div style={{flexBasis:'100%'}}>\r\n                            <p className=\"singleline\">\r\n                                {props.tile.process.name}, priority {props.tile.process.priority}, workers 1\r\n                            </p>\r\n\r\n                            {/* Show input items, if there are any */}\r\n                            {props.tile.process.inputGroup === 0 ? (\r\n                                <p className=\"singleline\">Input items: none</p>\r\n                            ):(\r\n                                <div>\r\n                                    <p className=\"singleline\">Input Items:</p>\r\n                                    {props.tile.process.inputGroup.map((ele,key) => (\r\n                                        <p key={key} className=\"singleline\">\r\n                                            {ele.name}, on hand={ele.onHand}, producing {ele.production}/hr\r\n                                        </p>\r\n                                    ))}\r\n                                </div>\r\n                            )}\r\n\r\n                            {/* Also show output items */}\r\n                            {props.tile.process.outputGroup === 0 ? (\r\n                                <p className=\"singleline\">Output items: none</p>\r\n                            ):(\r\n                                <div>\r\n                                    <p className=\"singleline\">Output Items:</p>\r\n                                    {props.tile.process.outputGroup.map((ele,key) => (\r\n                                        <p key={key} className=\"singleline\">\r\n                                            {ele.name}, on hand={ele.onHand}, producing {ele.production}/hr\r\n                                        </p>\r\n                                    ))}\r\n                                </div>\r\n                            )}\r\n                        </div>\r\n\r\n                        {/* Next, show an input box for priority, to allow the user to change it */}\r\n                        <div style={{ flexBasic: \"100%\" }}>\r\n                            <p className=\"singleline\">\r\n                                Priority:{\" \"}\r\n                                <DanInput\r\n                                    default={props.tile.process.priority}\r\n                                    onUpdate={(f, value) => setPriority(value)}\r\n                                    onEnter={changePriority}\r\n                                    onBlur={changePriority}\r\n                                />\r\n                            </p>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            )}\r\n\r\n            {/*Now, show a list of possible actions this building provides */}\r\n            <p className=\"singleline\" style={{ fontWeight: \"bold\" }}>\r\n                {props.tile.process === null ? \"\" : \"Other \"}Actions\r\n            </p>\r\n            {props.tile.actions.map((ele, key) => {\r\n                if (ele === pickedAction) {\r\n                    return (\r\n                        <div key={key} style={{ border: \"1px solid black\", margin: 8 }}>\r\n                            <p className=\"singleline\" style={{ textAlign: \"center\" }}>\r\n                                {ele.name}\r\n                            </p>\r\n                            <p className=\"singleline\">\r\n                                # of workers: <DanInput onUpdate={changeActionWorkers} fieldName={\"actionWorker\"} default={actionWorkers} />\r\n                                Range: {ele.minWorkers} to {ele.maxWorkers}\r\n                            </p>\r\n                            <p className=\"singleline\">\r\n                                Resources Needed: <span style={{ margin: 8 }}></span>\r\n                                {ele.inputGroup === 0\r\n                                    ? \"none\"\r\n                                    : ele.inputGroup.map((item, kel) => (\r\n                                          <span key={kel} className=\"commalist\">\r\n                                              {item.name} x{item.amount} (have {item.amount === undefined ? 0 : item.amount})\r\n                                          </span>\r\n                                      ))}\r\n                            </p>\r\n                            <p className=\"singleline\">\r\n                                Resources Produced: <span style={{ margin: 8 }}></span>\r\n                                {ele.outputGroup === 0\r\n                                    ? \"none\"\r\n                                    : ele.outputGroup.map((item, kel) => (\r\n                                          <span key={kel} className=\"commalist\">\r\n                                              {item.name} x{item.amount} (have {item.amount === undefined ? 0 : item.amount})\r\n                                          </span>\r\n                                      ))}\r\n                            </p>\r\n                            <p className=\"singleline\" style={{ textAlign: \"center\" }}>\r\n                                <span className=\"fakelink\" onClick={() => startAction(ele.name)}>\r\n                                    Start Work\r\n                                </span>\r\n                            </p>\r\n                        </div>\r\n                    );\r\n                }\r\n                return (\r\n                    <div key={key} style={{ cursor: \"pointer\" }} onClick={() => setPickedAction(ele)}>\r\n                        {ele.name}\r\n                    </div>\r\n                );\r\n            })}\r\n            <ErrorOverlay content={errorContent} onContinue={setErrorContent} />\r\n        </div>\r\n    )\r\n}\r\n\r\n","C:\\wamp\\www\\settlerswarlords\\src\\comp_worldMap.jsx",["52"],"C:\\wamp\\www\\settlerswarlords\\src\\index.js",[],"C:\\wamp\\www\\settlerswarlords\\src\\comp_admin.jsx",["53","54"],"C:\\wamp\\www\\settlerswarlords\\src\\DanAjax.js",[],{"ruleId":"55","replacedBy":"56"},{"ruleId":"57","replacedBy":"58"},{"ruleId":"59","severity":1,"message":"60","line":18,"column":24,"nodeType":"61","messageId":"62","endLine":18,"endColumn":26},{"ruleId":"63","severity":1,"message":"64","line":200,"column":58,"nodeType":"65","messageId":"66","endLine":200,"endColumn":65},{"ruleId":"59","severity":1,"message":"67","line":64,"column":21,"nodeType":"61","messageId":"62","endLine":64,"endColumn":23},{"ruleId":"68","severity":1,"message":"69","line":75,"column":12,"nodeType":"70","messageId":"71","endLine":75,"endColumn":28},{"ruleId":"68","severity":1,"message":"72","line":75,"column":30,"nodeType":"70","messageId":"71","endLine":75,"endColumn":49},"no-native-reassign",["73"],"no-negated-in-lhs",["74"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ReturnStatement","expectedReturnValue","Expected '!==' and instead saw '!='.","no-unused-vars","'actionMinWorkers' is assigned a value but never used.","Identifier","unusedVar","'setActionMinWorkers' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]