<<<<<<< HEAD
[{"F:\\wamp\\www\\settlerswarlords\\src\\reportWebVitals.js":"1","F:\\wamp\\www\\settlerswarlords\\src\\comp_localMap.jsx":"2","F:\\wamp\\www\\settlerswarlords\\src\\DanAjax.js":"3","F:\\wamp\\www\\settlerswarlords\\src\\comp_ErrorOverlay.jsx":"4","F:\\wamp\\www\\settlerswarlords\\src\\block_rockknapper.jsx":"5","F:\\wamp\\www\\settlerswarlords\\src\\block_foragepost.jsx":"6","F:\\wamp\\www\\settlerswarlords\\src\\block_toolbox.jsx":"7","F:\\wamp\\www\\settlerswarlords\\src\\block_strawdryer.jsx":"8","F:\\wamp\\www\\settlerswarlords\\src\\block_stickmaker.jsx":"9","F:\\wamp\\www\\settlerswarlords\\src\\block_loggerspost.jsx":"10","F:\\wamp\\www\\settlerswarlords\\src\\blockHasSelectableCrafting.jsx":"11","F:\\wamp\\www\\settlerswarlords\\src\\blockRunsFire.jsx":"12","F:\\wamp\\www\\settlerswarlords\\src\\blockHasWorkerPriority.jsx":"13","F:\\wamp\\www\\settlerswarlords\\src\\block_recycler.jsx":"14","F:\\wamp\\www\\settlerswarlords\\src\\App.js":"15","F:\\wamp\\www\\settlerswarlords\\src\\comp_worldMap.jsx":"16","F:\\wamp\\www\\settlerswarlords\\src\\DanCommon.js":"17","F:\\wamp\\www\\settlerswarlords\\src\\block_campfire.jsx":"18","F:\\wamp\\www\\settlerswarlords\\src\\block_firewoodmaker.jsx":"19","F:\\wamp\\www\\settlerswarlords\\src\\block_farmerspost.jsx":"20","F:\\wamp\\www\\settlerswarlords\\src\\blockSharesOutputs.jsx":"21","F:\\wamp\\www\\settlerswarlords\\src\\blockMovesWorkers.jsx":"22","F:\\wamp\\www\\settlerswarlords\\src\\game.jsx":"23","F:\\wamp\\www\\settlerswarlords\\src\\block_hauler.jsx":"24","F:\\wamp\\www\\settlerswarlords\\src\\block_harvester.jsx":"25","F:\\wamp\\www\\settlerswarlords\\src\\blockRequiresTools.jsx":"26","F:\\wamp\\www\\settlerswarlords\\src\\comp_account.jsx":"27","F:\\wamp\\www\\settlerswarlords\\src\\block_leanto.jsx":"28"},{"size":362,"mtime":1610251335559,"results":"29","hashOfConfig":"30"},{"size":13984,"mtime":1621910212352,"results":"31","hashOfConfig":"30"},{"size":2141,"mtime":1611446941675,"results":"32","hashOfConfig":"30"},{"size":2326,"mtime":1611446857039,"results":"33","hashOfConfig":"30"},{"size":5766,"mtime":1622079429253,"results":"34","hashOfConfig":"30"},{"size":3438,"mtime":1618873337041,"results":"35","hashOfConfig":"30"},{"size":11062,"mtime":1618971846101,"results":"36","hashOfConfig":"30"},{"size":5863,"mtime":1620332484555,"results":"37","hashOfConfig":"30"},{"size":6036,"mtime":1622233803920,"results":"38","hashOfConfig":"30"},{"size":5315,"mtime":1623016648921,"results":"39","hashOfConfig":"30"},{"size":9931,"mtime":1618768544299,"results":"40","hashOfConfig":"30"},{"size":9337,"mtime":1618875124225,"results":"41","hashOfConfig":"30"},{"size":2100,"mtime":1618166609218,"results":"42","hashOfConfig":"30"},{"size":3901,"mtime":1621910212351,"results":"43","hashOfConfig":"30"},{"size":28171,"mtime":1629996428569,"results":"44","hashOfConfig":"30"},{"size":24540,"mtime":1615046351441,"results":"45","hashOfConfig":"30"},{"size":2382,"mtime":1610580234395,"results":"46","hashOfConfig":"30"},{"size":8725,"mtime":1619215882824,"results":"47","hashOfConfig":"30"},{"size":3421,"mtime":1619983618854,"results":"48","hashOfConfig":"30"},{"size":15602,"mtime":1620500725907,"results":"49","hashOfConfig":"30"},{"size":2049,"mtime":1618353447155,"results":"50","hashOfConfig":"30"},{"size":11239,"mtime":1619992467600,"results":"51","hashOfConfig":"30"},{"size":12634,"mtime":1629997541563,"results":"52","hashOfConfig":"30"},{"size":11831,"mtime":1620145139951,"results":"53","hashOfConfig":"30"},{"size":9866,"mtime":1620219215325,"results":"54","hashOfConfig":"30"},{"size":7435,"mtime":1619976740776,"results":"55","hashOfConfig":"30"},{"size":9424,"mtime":1629846921180,"results":"56","hashOfConfig":"30"},{"size":5114,"mtime":1629988006646,"results":"57","hashOfConfig":"30"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},"5ka1sn",{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"71"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"76","messages":"77","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"78","usedDeprecatedRules":"71"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"71"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"71"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"89","messages":"90","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"91","messages":"92","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"71"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"71"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"101","usedDeprecatedRules":"71"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"104","messages":"105","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"106","messages":"107","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"108","messages":"109","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"110","messages":"111","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"112","messages":"113","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"114","messages":"115","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"116","messages":"117","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"F:\\wamp\\www\\settlerswarlords\\src\\reportWebVitals.js",[],["118","119"],"F:\\wamp\\www\\settlerswarlords\\src\\comp_localMap.jsx",[],"F:\\wamp\\www\\settlerswarlords\\src\\DanAjax.js",[],"F:\\wamp\\www\\settlerswarlords\\src\\comp_ErrorOverlay.jsx",[],"F:\\wamp\\www\\settlerswarlords\\src\\block_rockknapper.jsx",[],"F:\\wamp\\www\\settlerswarlords\\src\\block_foragepost.jsx",[],["120","121"],"F:\\wamp\\www\\settlerswarlords\\src\\block_toolbox.jsx",["122","123","124"],"F:\\wamp\\www\\settlerswarlords\\src\\block_strawdryer.jsx",[],"F:\\wamp\\www\\settlerswarlords\\src\\block_stickmaker.jsx",["125"],"/*  block_stickmaker.jsx\r\n    Produces sticks from existing trees in the area\r\n    For the game Settlers & Warlords\r\n*/\r\n\r\nimport React from \"react\";\r\nimport { imageURL } from \"./App.js\";\r\nimport {game} from \"./game.jsx\";\r\nimport {blockHasWorkerPriority} from \"./blockHasWorkerPriority.jsx\";\r\nimport {blockHasSelectableCrafting} from \"./blockHasSelectableCrafting.jsx\";\r\nimport {blockHasMultipleOutputs} from \"./blockHasMultipleOutputs.jsx\";\r\nimport {blockRequiresTools} from \"./blockRequiresTools.jsx\";\r\nimport {blockSharesOutputs} from \"./blockSharesOutputs.jsx\";\r\n\r\nexport function StickMaker(mapTile) {\r\n    if(mapTile.landtype!==5) return 'wronglandtype';\r\n\r\n    let b = {\r\n        id: game.getNextBlockId(),\r\n        name: \"Stick Maker\",\r\n        descr: `The effective use of wood is crucial for continued expansion of your colony. Durable yet easily workable, the woods here\r\n                provides plenty to be made use of`,\r\n        usage: `Cuts down small trees and branches of larger ones to produce sticks of various sizes. Requires tools`,\r\n        image: imageURL +'stickmaker.png',\r\n        progressBar: 0,\r\n        progressBarColor: 'blue',\r\n        progressBarMax: 30,\r\n        tileX: mapTile.x,\r\n        tileY: mapTile.y,\r\n        onhand: [],\r\n        craftOptions: [\r\n            {name:'Short Stick', craftTime:20, qty:1, itemType: 'item', itemExtras: {}, img:imageURL+\"item_ShortStick.png\"},\r\n            {name:'Long Stick', craftTime:20, qty:1, itemType: 'item', itemExtras: {}, img:imageURL+\"item_LongStick.png\"}\r\n        ],\r\n        toolGroups: [\r\n            {group:'axe', options: ['Flint Stabber', 'Flint Hatchet'], required:true, selected:'', loaded:null}\r\n        ],\r\n        possibleOutputs: ()=>{\r\n            // We don't have any items with prerequisites - yet. If we do, we can borrow the same code from the Rock Knapper\r\n            return b.craftOptions.map(e=>e.name);\r\n        },\r\n        willAccept: item=>false,    // This block doesn't have any inputs (besides tools - that's handled differently)\r\n        takeItem: item=>false,\r\n        fetchItem: itemId=>{\r\n            // Returns an item, if this block has it, or null if it was not found. This is primarily used in the game\r\n            // object to manage food and updating other item stats\r\n            // Since this only has outputs, we can locate the item in our onhand list\r\n            let item = b.onhand.find(e=>e.id===itemId);\r\n            if(typeof(item)!=='undefined') return item;\r\n            \r\n            // We didn't find the item in our onhand list. We might still find it in the tools list\r\n            for(let i=0;i<b.toolGroups.length;i++) {\r\n                if(b.toolGroups[i].loaded!==null) {\r\n                    if(b.toolGroups[i].loaded.id===itemId) return b.toolGroups[i].loaded;\r\n                }\r\n            }\r\n            return null;\r\n        },\r\n        destroyItem: itemId=>{\r\n            let slot = b.onhand.findIndex(e=>e.id===itemId);\r\n            if(slot!==-1) {\r\n                b.onhand.splice(slot,1);    // We can leave Game to delete the item, since all they need is the id\r\n                return true;\r\n            }\r\n            // Now check the tools structure\r\n            return b.toolGroups.some(ele=>{\r\n                if(ele.loaded===null) return false;\r\n                if(ele.loaded.id!==itemId) return false;\r\n                ele.loaded = null;\r\n                return true;\r\n            });\r\n        },\r\n        update: ()=>{\r\n            // Before any work can be done here, a tool must be loaded\r\n            if(!b.checkTools()) return; // No tool selected\r\n            if(b.currentCraft==='') return; // No item selected to craft\r\n            if(b.onhand.length>=5) return; // We can only hold 5 finished items\r\n            if(game.workPoints<=0) return; // Nobody available to work here\r\n            game.workPoints--;\r\n            b.useTools();\r\n            b.progressCraft(1);\r\n        },\r\n        SidePanel: ()=>{\r\n            const Priority = b.ShowPriority;\r\n            const ItemOutputs = b.ShowOutputs;\r\n            const CraftOptions = b.ShowCraftOptions;\r\n            const Tools = b.ShowTools;\r\n            return (\r\n                <>\r\n                    <Priority />\r\n                    <ItemOutputs />\r\n                    <CraftOptions />\r\n                    <Tools />\r\n                </>\r\n            );\r\n        },\r\n        save: ()=>{\r\n            return {\r\n                priority: b.priority,\r\n                progress: b.progressBar,\r\n                items: b.onhand,\r\n                currentCraft: b.currentCraft,\r\n                nextCraft: b.nextCraft,\r\n                tools: b.toolGroups.map(t=>{\r\n                    return {\r\n                        group: t.group,\r\n                        selected: t.selected,\r\n                        loaded: typeof(t.loaded)==='null'?'none':t.loaded\r\n                    }\r\n                })\r\n            };\r\n        },\r\n        load: content=>{\r\n            b.priority     = content.priority;\r\n            b.progressBar  = content.progress;\r\n            b.onhand       = content.items;\r\n            b.currentCraft = content.currentCraft;\r\n            b.nextCraft    = content.nextCraft;\r\n            b.toolGroups   = b.toolGroups.map(group => {\r\n                let source = content.tools.find(e=>group.group===e.group);\r\n                group.selected = source.selected;\r\n                group.loaded = (source.loaded==='none')?null:source.loaded;\r\n                return group;\r\n            });\r\n            // Don't forget to set the progress bar's max value, too, since it's based on the currently crafted item\r\n            if(b.currentCraft!=='') {\r\n                b.progressBarMax = b.craftOptions.find(e=>e.name===b.currentCraft).craftTime;\r\n            }\r\n        }\r\n    };\r\n    return Object.assign(\r\n        b,\r\n        blockHasWorkerPriority(b),\r\n        blockHasSelectableCrafting(b),\r\n        blockHasMultipleOutputs(b),\r\n        blockRequiresTools(b),\r\n        blockSharesOutputs(b)\r\n    );\r\n}","F:\\wamp\\www\\settlerswarlords\\src\\block_loggerspost.jsx",[],"F:\\wamp\\www\\settlerswarlords\\src\\blockHasSelectableCrafting.jsx",[],"F:\\wamp\\www\\settlerswarlords\\src\\blockRunsFire.jsx",[],"F:\\wamp\\www\\settlerswarlords\\src\\blockHasWorkerPriority.jsx",[],"F:\\wamp\\www\\settlerswarlords\\src\\block_recycler.jsx",[],"F:\\wamp\\www\\settlerswarlords\\src\\App.js",["126","127","128"],"F:\\wamp\\www\\settlerswarlords\\src\\comp_worldMap.jsx",["129","130","131"],"F:\\wamp\\www\\settlerswarlords\\src\\DanCommon.js",[],"F:\\wamp\\www\\settlerswarlords\\src\\block_campfire.jsx",[],"F:\\wamp\\www\\settlerswarlords\\src\\block_firewoodmaker.jsx",[],"F:\\wamp\\www\\settlerswarlords\\src\\block_farmerspost.jsx",["132"],"/*  farmerspost.jsx\r\n    Manages farmlands around the block, producing plant products\r\n    For the game Settlers & Warlords\r\n*/\r\n\r\nimport React from \"react\";\r\nimport { imageURL } from \"./App.js\";\r\nimport { game } from \"./game.jsx\";\r\nimport { blockHasWorkerPriority } from \"./blockHasWorkerPriority.jsx\";\r\nimport { blockHasMultipleOutputs } from \"./blockHasMultipleOutputs.jsx\";\r\nimport { blockRequiresTools } from \"./blockRequiresTools.jsx\";\r\nimport { blockSharesOutputs } from \"./blockSharesOutputs.jsx\";\r\n\r\nconst seedsList = ['Wheat Grain', 'Oat Grain', 'Rye Grain', 'Barley Grain', 'Millet Grain', 'Strawberry Seed', 'Rice Seed',\r\n                   'Potato Seed', 'Carrot Seed', 'Bean Seed', 'Corn Seed', 'Garlic Seed', 'Squash Seed', 'Onion Seed'];\r\n                   //'Grape Seed', 'Blueberry Seed'];\r\n\r\nexport function FarmersPost(mapTile) {\r\n    let b = {\r\n        id: game.getNextBlockId(),\r\n        name: \"Farmers Post\",\r\n        descr: `Edible plants are everywhere, but in the wild, they don't grow in enough places to support anyone. Farming allows humans\r\n                to cultivate crops on a larger scale, supporting much more people.`,\r\n        usage: `Clear lands to collect grains, straw and a chance to find seeds. Plant seeds to let them grow and harvest them when complete`,\r\n        image: imageURL +'farmerspost.png',\r\n        progressBar: 0,\r\n        progressBarColor: 'orange',\r\n        progressBarMax: 30,\r\n        tileX: mapTile.x,\r\n        tileY: mapTile.y,\r\n        onhand: [],\r\n        seeds: [], // We can use seeds from this category, accept new seeds from other blocks, or output seeds when needed\r\n        outputSeeds: false, // Set to true for this block to output the seeds it has on hand... We might increase precision on this to\r\n                // control which seeds get output... we might not\r\n        toolGroups: [\r\n            {group:'scythe', options: ['Flint Scythe'], required:true, selected:'', loaded:null},\r\n            {group:'hoe', options: ['Flint Hoe'], required:true, selected:'', loaded:null}\r\n        ],\r\n        tileSet: [], // contains all tiles w/ data we have activity in\r\n        possibleOutputs: ()=>{\r\n            return ['Wet Straw', ...seedsList, 'Strawberries', 'Rice', 'Potatoes', 'Carrots', 'Beans', 'Corn', 'Garlic', 'Squash',\r\n                    'Onion', 'Grapes', 'Blueberries'];\r\n        },\r\n        // willOutput is handled by blockSharesOutputs. We can use this despite the seed plans, as newly made seeds will be put back\r\n        // into the seeds input slot (unless full)\r\n        // hasItem is handled by blockSharesOutputs\r\n        // getItem is handled by blockSharesOutputs\r\n        // getItemFrom is handled by blockSharesOutputs\r\n        // findItems is handled by blockSharesOutputs\r\n        willAccept: item => {\r\n            // Returns true if this block will accept the given item\r\n            // Basically, if it's a seed, we'll accept it. But there's a lot of seeds.\r\n            // Since we're using the seeds list elsewhere too, we'll move that list to a constant.\r\n            return seedsList.includes(item.name) && b.seeds.length<5;\r\n        },\r\n        takeItem: item => {\r\n            // Accept an item from another block. Returns true if the item is accepted, or false if not\r\n            if(!seedsList.includes(item.name)) {\r\n                console.log('Error: Received item '+ item.name +', not in seeds list');\r\n                return false;\r\n            }\r\n            b.seeds.push(item);\r\n            return true;\r\n        },\r\n        fetchItem: itemId => {\r\n            let item = b.onhand.find(e=>e.id===itemId);\r\n            if(typeof(item)!=='undefined') return item;\r\n            item = b.seeds.find(e=>e.id===itemId);\r\n            if(typeof(item)!=='undefined') return item;\r\n            \r\n            // We didn't find the item in our onhand list. We might still find it in the tools list\r\n            for(let i=0;i<b.toolGroups.length;i++) {\r\n                if(b.toolGroups[i].loaded!==null) {\r\n                    if(b.toolGroups[i].loaded.id===itemId) return b.toolGroups[i].loaded;\r\n                }\r\n            }\r\n            return null;\r\n        },\r\n        destroyItem: itemId => {\r\n            let slot = b.onhand.findIndex(e=>e.id===itemId);\r\n            if(slot!==-1) {\r\n                b.onhand.splice(slot,1);    // We can leave Game to delete the item, since all they need is the id\r\n                return true;\r\n            }\r\n            slot = b.seeds.findIndex(e=>e.id===itemId);\r\n            if(slot!==-1) {\r\n                b.seeds.splice(slot,1);\r\n                return true;\r\n            }\r\n            // Now check the tools structure\r\n            return b.toolGroups.some(ele=>{\r\n                if(ele.loaded===null) return false;\r\n                if(ele.loaded.id!==itemId) return false;\r\n                ele.loaded = null;\r\n                return true;\r\n            });\r\n        },\r\n        update: ()=>{\r\n            // This will operate in multiple modes at once... in a sense. When there are plants to harvest, this will collect them (before\r\n            // foods rot on the plant). Otherwise, it will prepare land for planting, and plant crops... so long as there's land to be used\r\n            // for growing\r\n\r\n            // Before determining if this block will do any work, update all the land plot data we currently have\r\n            b.tileSet.forEach(ele=>{\r\n                if(ele.mode==='grow') {\r\n                    ele.counter++;\r\n                }\r\n            });\r\n            // Determine if we can do work here\r\n            if(game.workPoints<=0) return;\r\n            if(!b.checkTools()) return;     // no tools loaded\r\n\r\n            // Process any lands needing work. Since all new lands we're planting on are at the end, we don't need to worry about\r\n            // plants staying on too long because we're too busy planting\r\n            for(let i=0; i<b.tileSet.length; i++) {\r\n                if(b.tileSet[i].mode==='plant') {\r\n                    // We're still working on planting here. Continue the process\r\n                    console.log('Farmers post: planting @ '+ b.tileSet[i].x +','+ b.tileSet[i].y);\r\n                    game.workPoints--;\r\n                    b.useTools();\r\n                    b.tileSet[i].counter++;\r\n                    if(b.tileSet[i].counter>60) {\r\n                        // This is ready to move to the growing phase\r\n                        b.tileSet[i].mode = 'grow';\r\n                        b.tileSet[i].counter = 0;\r\n                        // We should have already set the grow target and spoillevel earlier\r\n                    }\r\n                    return;\r\n                }\r\n                if(b.tileSet[i].mode==='grow') {\r\n                    // Waiting for plants to grow. Determine if this has grown enough\r\n                    if(b.tileSet[i].counter>=b.tileSet[i].spoilLevel) {\r\n                        // Set this to the spoil state. It will still need to be cleared, but will provide seeds only (crop specific), no food\r\n                        b.tileSet[i].mode = 'spoiled';\r\n                    }\r\n                    if(b.tileSet[i].counter>=b.tileSet[i].growTarget) {\r\n                        b.tileSet[i].mode = 'harvest';\r\n                    }\r\n                    b.tileSet[i].counter = 0;\r\n                }\r\n                if(b.tileSet[i].mode==='spoiled' || b.tileSet[i].mode==='harvest') {\r\n                    // Make progress on harvesting these items\r\n                    game.workPoints--;\r\n                    b.useTools();\r\n                    b.tileSet[i].counter++;\r\n                    if(b.tileSet[i].counter>b.tileSet[i].harvestTime) {\r\n                        // Output the seeds we expect\r\n                        for(let j=0; j<b.tileSet[i].seedQty; j++) {\r\n                            if(b.seeds.length>20) {\r\n                                b.onhand.push(game.createItem(b.id, b.tileSet[i].seed, 'item'));\r\n                            }else{\r\n                                b.seeds.push(game.createItem(b.id, b.tileSet[i].seed, 'item'));\r\n                            }\r\n                        }\r\n                        // Now output the crops we expect, if not spoiled\r\n                        if(b.tileSet[i].mode==='harvest' && b.tileSet[i].product!=='none') {\r\n                            for(let j=0; j<b.tileSet[i].productQty; j++) {\r\n                                b.onhand.push(game.createItem(b.id, b.tileSet[i].product, b.tileSet[i].productGroup, b.tileSet[i].productExtras));\r\n                            }\r\n                        }\r\n                        // Now, clear this tile of the plant-growing status. We need to locate the block first\r\n                        let tile = game.tiles.find(ele=>ele.x===b.tileSet[i].x && ele.y===b.tileSet[i].y);\r\n                        if(typeof(tile)==='undefined') {\r\n                            console.log('Error in Farmers Post: Target block not found when removing growth status');\r\n                            return;\r\n                        }\r\n                        tile.newlandtype = 12;\r\n                        b.tileSet.splice(i, 1);\r\n                    }\r\n                    return;\r\n                }\r\n            }\r\n\r\n            // ...oh, still here? That means none of our current tiles need work (or we have no tiles at all)\r\n            if(b.seeds.length<=0) return;\r\n\r\n            // Find another tile to add to our list, so we can start planting things\r\n            let target = game.tiles.find(ele=>{\r\n                if(ele.x<b.tileX-10) return false; // too far left\r\n                if(ele.x>b.tileX+10) return false; // too far right\r\n                if(ele.y<b.tileY-10) return false; // too far up\r\n                if(ele.y>b.tileY+10) return false; // too far right\r\n                if(ele.newlandtype===12) return true; // only land type acceptable\r\n                return false;\r\n            });\r\n            if(typeof(target)==='undefined') {\r\n                console.log('Farmers Post did not find any valid lands to farm on');\r\n                return;\r\n            }\r\n            target.newlandtype = 13;\r\n\r\n            // This would work, but we haven't used any work points yet. As we create the object, we also need to\r\n            // account for 1 cycle of the planting phase\r\n            game.workPoints--;\r\n            b.useTools();\r\n            let pack = {};\r\n            switch(b.seeds[0].name) {\r\n                case 'Wheat Grain': pack = {seedQty:6, product:'none', productQty:0, productGroup:'item', productExtras:{}, harvestTime:20, growTarget:200, spoilLevel:300}; break;\r\n                case 'Oat Grain': pack = {seedQty:5, product:'none', productQty:0, productGroup:'item', productExtras:{}, harvestTime:22, growTarget:180, spoilLevel:350}; break;\r\n                case 'Rye Grain': pack = {seedQty:7, product:'none', productQty:0, productGroup:'item', productExtras:{}, harvestTime:28, growTarget:280, spoilLevel:350}; break;\r\n                case 'Barley Grain': pack = {seedQty:5, product:'none', productQty:0, productGroup:'item', productExtras:{}, harvestTime:22, growTarget:250, spoilLevel:350}; break;\r\n                case 'Millet Grain': pack = {seedQty:4, product:'none', productQty:0, productGroup:'item', productExtras:{}, harvestTime:30, growTarget:260, spoilLevel:330}; break;\r\n                case 'Strawberry Seed': pack = {seedQty:3, product:'Strawberry', productQty:5, productGroup:'food', productExtras:{lifetime:300}, harvestTime:20, growTarget:120, spoilLevel:200}; break;\r\n                case 'Rice Seed': pack = {seedQty:7, product:'Rice', productQty:5, productGroup:'food', productExtras:{lifetime:450}, harvestTime:30, growTarget:160, spoilLevel:350}; break;\r\n                case 'Potato Seed': pack = {seedQty:5, product:'Potato', productQty:12, productGroup:'item', productExtras:{}, harvestTime:35, growTarget:250, spoilLevel:400}; break;\r\n                case 'Carrot Seed': pack = {seedQty:4, product:'Carrot', productQty:5, productGroup:'food', productExtras:{lifetime:600}, harvestTime:35, growTarget:220, spoilLevel:350}; break;\r\n                case 'Bean Seed': pack = {seedQty:6, product:'Bean', productQty:8, productGroup:'item', productExtras:{}, harvestTime:25, growTarget:250, spoilLevel:350}; break;\r\n                case 'Corn Seed': pack = {seedQty:4, product:'Corn', productQty:8, productGroup:'food', productExtras:{lifetime:300}, harvestTime:15, growTarget:250, spoilLevel:350}; break;\r\n                case 'Garlic Seed': pack = {seedQty:5, product:'Garlic', productQty:4, productGroup:'food', productExtras:{lifetime:450}, harvestTime:30, growTarget:300, spoilLevel:400}; break;\r\n                case 'Squash Seed': pack = {seedQty:4, product:'Squash', productQty:5, productGroup:'item', productExtras:{}, harvestTime:20, growTarget:350, spoilLevel:450}; break;\r\n                case 'Onion Seed': pack = {seedQty:4, product:'Onion', productQty:5, productGroup:'food', productExtras:{lifetime:500}, harvestTime:30, growTarget:300, spoilLevel:450}; break;\r\n            }\r\n            b.tileSet.push({\r\n                x: target.x,\r\n                y: target.y,\r\n                mode: 'plant',\r\n                counter: 1,\r\n                seed: b.seeds[0].name,\r\n                ...pack\r\n            });\r\n            b.seeds.splice(0,1);    // Finally, remove the seed from our inputs\r\n        },\r\n        SidePanel: ()=>{\r\n            const Priority = b.ShowPriority;\r\n            const Tools = b.ShowTools;\r\n            const Outputs = b.ShowOutputs;\r\n            return <>\r\n                <Priority />\r\n                <Outputs />\r\n                {b.tileSet.length===0?(\r\n                    <p className=\"singleline\">No current targets</p>\r\n                ):\r\n                    b.tileSet.map((ele,key)=>{\r\n                        switch(ele.mode) {\r\n                            case 'plant': return <p key={key} className=\"singleline\">Planting {ele.seed}, {Math.floor((ele.counter/60)*100)}% complete</p>;\r\n                            case 'grow':  return <p key={key} className=\"singleline\">Growing {ele.seed}, {Math.floor((ele.counter/ele.growTarget)*100)}% complete</p>;\r\n                            case 'harvest': return <p key={key} className=\"singleline\">Harvesting {ele.seed}, {Math.floor((ele.counter/ele.harvestTime)*100)}% complete</p>;\r\n                            case 'spoiled': return <p key={key} className=\"singleline\">Removing {ele.seed}, {Math.floor((ele.counter/ele.harvestTime)*100)}% complete</p>;\r\n                            default: return <p key={key} className=\"singleline\">Unknown mode={ele.mode} for {ele.seed}</p>;\r\n                        }\r\n                    })\r\n                }\r\n                <Tools />\r\n            </>;\r\n        },\r\n        save: ()=>{\r\n            return {\r\n                priority: b.priority,\r\n                progress: b.progressBar, // well... we're not using this yet. We need to. Keep this\r\n                items: b.onhand,\r\n                seeds: b.seeds,\r\n                targets: b.tileSet,\r\n                tools: b.saveTools()\r\n            };\r\n        },\r\n        load: content => {\r\n            b.priority    = content.priority;\r\n            b.progressBar = content.progress;\r\n            b.onhand      = content.items;\r\n            b.seeds       = content.seeds;\r\n            b.tileSet     = content.targets;\r\n            b.loadTools(content);\r\n        }\r\n    };\r\n\r\n    return Object.assign(b, blockHasWorkerPriority(b), blockHasMultipleOutputs(b), blockRequiresTools(b), blockSharesOutputs(b));\r\n}\r\n\r\n","F:\\wamp\\www\\settlerswarlords\\src\\blockSharesOutputs.jsx",[],"F:\\wamp\\www\\settlerswarlords\\src\\blockMovesWorkers.jsx",["133","134","135","136"],"F:\\wamp\\www\\settlerswarlords\\src\\game.jsx",[],"F:\\wamp\\www\\settlerswarlords\\src\\block_hauler.jsx",["137"],"F:\\wamp\\www\\settlerswarlords\\src\\block_harvester.jsx",[],"F:\\wamp\\www\\settlerswarlords\\src\\blockRequiresTools.jsx",[],"F:\\wamp\\www\\settlerswarlords\\src\\comp_account.jsx",[],"F:\\wamp\\www\\settlerswarlords\\src\\block_leanto.jsx",[],{"ruleId":"138","replacedBy":"139"},{"ruleId":"140","replacedBy":"141"},{"ruleId":"138","replacedBy":"142"},{"ruleId":"140","replacedBy":"143"},{"ruleId":"144","severity":1,"message":"145","line":106,"column":13,"nodeType":"146","messageId":"147","endLine":160,"endColumn":14},{"ruleId":"148","severity":1,"message":"149","line":179,"column":43,"nodeType":"150","messageId":"151","endLine":179,"endColumn":49},{"ruleId":"148","severity":1,"message":"149","line":182,"column":49,"nodeType":"150","messageId":"151","endLine":182,"endColumn":55},{"ruleId":"148","severity":1,"message":"149","line":108,"column":52,"nodeType":"150","messageId":"151","endLine":108,"endColumn":58},{"ruleId":"152","severity":1,"message":"153","line":373,"column":13,"nodeType":"154","endLine":373,"endColumn":62},{"ruleId":"152","severity":1,"message":"153","line":375,"column":13,"nodeType":"154","endLine":375,"endColumn":61},{"ruleId":"152","severity":1,"message":"153","line":377,"column":13,"nodeType":"154","endLine":377,"endColumn":61},{"ruleId":"155","severity":1,"message":"156","line":64,"column":21,"nodeType":"157","messageId":"158","endLine":64,"endColumn":23},{"ruleId":"144","severity":1,"message":"145","line":428,"column":9,"nodeType":"146","messageId":"147","endLine":432,"endColumn":10},{"ruleId":"155","severity":1,"message":"156","line":504,"column":26,"nodeType":"157","messageId":"158","endLine":504,"endColumn":28},{"ruleId":"144","severity":1,"message":"145","line":197,"column":13,"nodeType":"146","messageId":"147","endLine":212,"endColumn":14},{"ruleId":"155","severity":1,"message":"159","line":48,"column":21,"nodeType":"157","messageId":"158","endLine":48,"endColumn":23},{"ruleId":"155","severity":1,"message":"156","line":100,"column":19,"nodeType":"157","messageId":"158","endLine":100,"endColumn":21},{"ruleId":"155","severity":1,"message":"156","line":207,"column":26,"nodeType":"157","messageId":"158","endLine":207,"endColumn":28},{"ruleId":"155","severity":1,"message":"159","line":209,"column":70,"nodeType":"157","messageId":"158","endLine":209,"endColumn":72},{"ruleId":"144","severity":1,"message":"145","line":61,"column":13,"nodeType":"146","messageId":"147","endLine":131,"endColumn":14},"no-native-reassign",["160"],"no-negated-in-lhs",["161"],["160"],["161"],"default-case","Expected a default case.","SwitchStatement","missingDefaultCase","valid-typeof","Invalid typeof comparison value.","Literal","invalidValue","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","Expected '===' and instead saw '=='.","no-global-assign","no-unsafe-negation"]
=======
[{"C:\\wamp\\www\\settlerswarlords\\src\\block_harvester.jsx":"1","C:\\wamp\\www\\settlerswarlords\\src\\block_stickmaker.jsx":"2","C:\\wamp\\www\\settlerswarlords\\src\\block_twinemaker.jsx":"3","C:\\wamp\\www\\settlerswarlords\\src\\block_firewoodmaker.jsx":"4","C:\\wamp\\www\\settlerswarlords\\src\\block_flinttoolmaker.jsx":"5","C:\\wamp\\www\\settlerswarlords\\src\\comp_localMap.jsx":"6","C:\\wamp\\www\\settlerswarlords\\src\\blockMovesWorkers.jsx":"7","C:\\wamp\\www\\settlerswarlords\\src\\block_hauler.jsx":"8","C:\\wamp\\www\\settlerswarlords\\src\\block_butchershop.jsx":"9","C:\\wamp\\www\\settlerswarlords\\src\\App.js":"10","C:\\wamp\\www\\settlerswarlords\\src\\block_strawdryer.jsx":"11","C:\\wamp\\www\\settlerswarlords\\src\\block_rockknapper.jsx":"12","C:\\wamp\\www\\settlerswarlords\\src\\block_leanto.jsx":"13","C:\\wamp\\www\\settlerswarlords\\src\\block_farmerspost.jsx":"14","C:\\wamp\\www\\settlerswarlords\\src\\blockHasOutputsPerInput.jsx":"15","C:\\wamp\\www\\settlerswarlords\\src\\game.jsx":"16","C:\\wamp\\www\\settlerswarlords\\src\\blockHasMultipleOutputs.jsx":"17","C:\\wamp\\www\\settlerswarlords\\src\\block_recycler.jsx":"18","C:\\wamp\\www\\settlerswarlords\\src\\blockDeletesWithItems.jsx":"19","C:\\wamp\\www\\settlerswarlords\\src\\reportWebVitals.js":"20","C:\\wamp\\www\\settlerswarlords\\src\\block_foragepost.jsx":"21","C:\\wamp\\www\\settlerswarlords\\src\\block_huntingpost.jsx":"22","C:\\wamp\\www\\settlerswarlords\\src\\DanInput.jsx":"23","C:\\wamp\\www\\settlerswarlords\\src\\DanCommon.js":"24","C:\\wamp\\www\\settlerswarlords\\src\\blockSharesOutputs.jsx":"25","C:\\wamp\\www\\settlerswarlords\\src\\blockRunsFire.jsx":"26"},{"size":9866,"mtime":1620219215325,"results":"27","hashOfConfig":"28"},{"size":6036,"mtime":1619983161878,"results":"29","hashOfConfig":"28"},{"size":4722,"mtime":1619983168021,"results":"30","hashOfConfig":"28"},{"size":3421,"mtime":1619983618854,"results":"31","hashOfConfig":"28"},{"size":6184,"mtime":1620216531099,"results":"32","hashOfConfig":"28"},{"size":14658,"mtime":1621773968226,"results":"33","hashOfConfig":"28"},{"size":11239,"mtime":1619992467600,"results":"34","hashOfConfig":"28"},{"size":11831,"mtime":1620145139951,"results":"35","hashOfConfig":"28"},{"size":8439,"mtime":1620161095407,"results":"36","hashOfConfig":"28"},{"size":28522,"mtime":1621135623771,"results":"37","hashOfConfig":"28"},{"size":5863,"mtime":1620332484555,"results":"38","hashOfConfig":"28"},{"size":5759,"mtime":1621134233739,"results":"39","hashOfConfig":"28"},{"size":3606,"mtime":1620161472159,"results":"40","hashOfConfig":"28"},{"size":15602,"mtime":1620500725907,"results":"41","hashOfConfig":"28"},{"size":2731,"mtime":1620495134281,"results":"42","hashOfConfig":"28"},{"size":13639,"mtime":1621909753409,"results":"43","hashOfConfig":"28"},{"size":2565,"mtime":1621774562899,"results":"44","hashOfConfig":"28"},{"size":5444,"mtime":1621908990012,"results":"45","hashOfConfig":"28"},{"size":2800,"mtime":1621134325348,"results":"46","hashOfConfig":"28"},{"size":362,"mtime":1610251335559,"results":"47","hashOfConfig":"28"},{"size":3438,"mtime":1618873337041,"results":"48","hashOfConfig":"28"},{"size":5415,"mtime":1619141057992,"results":"49","hashOfConfig":"28"},{"size":2448,"mtime":1614382232549,"results":"50","hashOfConfig":"28"},{"size":2382,"mtime":1610580234395,"results":"51","hashOfConfig":"28"},{"size":2049,"mtime":1618353447155,"results":"52","hashOfConfig":"28"},{"size":9337,"mtime":1618875124225,"results":"53","hashOfConfig":"28"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"z4qb3y",{"filePath":"56","messages":"57","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"58","usedDeprecatedRules":"59"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"68","messages":"69","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"70","messages":"71","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"72","usedDeprecatedRules":"59"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"59"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"83","messages":"84","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"59"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"107","messages":"108","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\wamp\\www\\settlerswarlords\\src\\block_harvester.jsx",[],"C:\\wamp\\www\\settlerswarlords\\src\\block_stickmaker.jsx",["109"],"/*  block_stickmaker.jsx\r\n    Produces sticks from existing trees in the area\r\n    For the game Settlers & Warlords\r\n*/\r\n\r\nimport React from \"react\";\r\nimport { imageURL } from \"./App.js\";\r\nimport {game} from \"./game.jsx\";\r\nimport {blockHasWorkerPriority} from \"./blockHasWorkerPriority.jsx\";\r\nimport {blockHasSelectableCrafting} from \"./blockHasSelectableCrafting.jsx\";\r\nimport {blockHasMultipleOutputs} from \"./blockHasMultipleOutputs.jsx\";\r\nimport {blockRequiresTools} from \"./blockRequiresTools.jsx\";\r\nimport {blockSharesOutputs} from \"./blockSharesOutputs.jsx\";\r\n\r\nexport function StickMaker(mapTile) {\r\n    if(mapTile.landtype!==5) return 'wronglandtype';\r\n\r\n    let b = {\r\n        id: game.getNextBlockId(),\r\n        name: \"Stick Maker\",\r\n        descr: `The effective use of wood is crucial for continued expansion of your colony. Durable yet easily workable, the woods here\r\n                provides plenty to be made use of`,\r\n        usage: `Cuts down small trees and branches of larger ones to produce sticks of various sizes. Requires tools`,\r\n        image: imageURL +'stickmaker.png',\r\n        progressBar: 0,\r\n        progressBarColor: 'blue',\r\n        progressBarMax: 30,\r\n        tileX: mapTile.x,\r\n        tileY: mapTile.y,\r\n        onhand: [],\r\n        craftOptions: [\r\n            {name:'Short Stick', craftTime:20, qty:1, itemType: 'item', itemExtras: {}, img:imageURL+\"item_ShortStick.png\"},\r\n            {name:'Long Stick', craftTime:20, qty:1, itemType: 'item', itemExtras: {}, img:imageURL+\"item_LongStick.png\"}\r\n        ],\r\n        toolGroups: [\r\n            {group:'axe', options: ['Flint Stabber', 'Flint Pickaxe'], required:true, selected:'', loaded:null}\r\n        ],\r\n        possibleOutputs: ()=>{\r\n            // We don't have any items with prerequisites - yet. If we do, we can borrow the same code from the Rock Knapper\r\n            return b.craftOptions.map(e=>e.name);\r\n        },\r\n        willAccept: item=>false,    // This block doesn't have any inputs (besides tools - that's handled differently)\r\n        takeItem: item=>false,\r\n        fetchItem: itemId=>{\r\n            // Returns an item, if this block has it, or null if it was not found. This is primarily used in the game\r\n            // object to manage food and updating other item stats\r\n            // Since this only has outputs, we can locate the item in our onhand list\r\n            let item = b.onhand.find(e=>e.id===itemId);\r\n            if(typeof(item)!=='undefined') return item;\r\n            \r\n            // We didn't find the item in our onhand list. We might still find it in the tools list\r\n            for(let i=0;i<b.toolGroups.length;i++) {\r\n                if(b.toolGroups[i].loaded!==null) {\r\n                    if(b.toolGroups[i].loaded.id===itemId) return b.toolGroups[i].loaded;\r\n                }\r\n            }\r\n            return null;\r\n        },\r\n        destroyItem: itemId=>{\r\n            let slot = b.onhand.findIndex(e=>e.id===itemId);\r\n            if(slot!==-1) {\r\n                b.onhand.splice(slot,1);    // We can leave Game to delete the item, since all they need is the id\r\n                return true;\r\n            }\r\n            // Now check the tools structure\r\n            return b.toolGroups.some(ele=>{\r\n                if(ele.loaded===null) return false;\r\n                if(ele.loaded.id!==itemId) return false;\r\n                ele.loaded = null;\r\n                return true;\r\n            });\r\n        },\r\n        update: ()=>{\r\n            // Before any work can be done here, a tool must be loaded\r\n            if(!b.checkTools()) return; // No tool selected\r\n            if(b.currentCraft==='') return; // No item selected to craft\r\n            if(b.onhand.length>=5) return; // We can only hold 5 finished items\r\n            if(game.workPoints<=0) return; // Nobody available to work here\r\n            game.workPoints--;\r\n            b.useTools();\r\n            b.progressCraft(1);\r\n        },\r\n        SidePanel: ()=>{\r\n            const Priority = b.ShowPriority;\r\n            const ItemOutputs = b.ShowOutputs;\r\n            const CraftOptions = b.ShowCraftOptions;\r\n            const Tools = b.ShowTools;\r\n            return (\r\n                <>\r\n                    <Priority />\r\n                    <ItemOutputs />\r\n                    <CraftOptions />\r\n                    <Tools />\r\n                </>\r\n            );\r\n        },\r\n        save: ()=>{\r\n            return {\r\n                priority: b.priority,\r\n                progress: b.progressBar,\r\n                items: b.onhand,\r\n                currentCraft: b.currentCraft,\r\n                nextCraft: b.nextCraft,\r\n                tools: b.toolGroups.map(t=>{\r\n                    return {\r\n                        group: t.group,\r\n                        selected: t.selected,\r\n                        loaded: typeof(t.loaded)==='null'?'none':t.loaded\r\n                    }\r\n                })\r\n            };\r\n        },\r\n        load: content=>{\r\n            b.priority     = content.priority;\r\n            b.progressBar  = content.progress;\r\n            b.onhand       = content.items;\r\n            b.currentCraft = content.currentCraft;\r\n            b.nextCraft    = content.nextCraft;\r\n            b.toolGroups   = b.toolGroups.map(group => {\r\n                let source = content.tools.find(e=>group.group===e.group);\r\n                group.selected = source.selected;\r\n                group.loaded = (source.loaded==='none')?null:source.loaded;\r\n                return group;\r\n            });\r\n            // Don't forget to set the progress bar's max value, too, since it's based on the currently crafted item\r\n            if(b.currentCraft!=='') {\r\n                b.progressBarMax = b.craftOptions.find(e=>e.name===b.currentCraft).craftTime;\r\n            }\r\n        }\r\n    };\r\n    return Object.assign(\r\n        b,\r\n        blockHasWorkerPriority(b),\r\n        blockHasSelectableCrafting(b),\r\n        blockHasMultipleOutputs(b),\r\n        blockRequiresTools(b),\r\n        blockSharesOutputs(b)\r\n    );\r\n}",["110","111"],"C:\\wamp\\www\\settlerswarlords\\src\\block_twinemaker.jsx",[],"C:\\wamp\\www\\settlerswarlords\\src\\block_firewoodmaker.jsx",[],"C:\\wamp\\www\\settlerswarlords\\src\\block_flinttoolmaker.jsx",[],"C:\\wamp\\www\\settlerswarlords\\src\\comp_localMap.jsx",[],"C:\\wamp\\www\\settlerswarlords\\src\\blockMovesWorkers.jsx",["112","113","114","115"],"C:\\wamp\\www\\settlerswarlords\\src\\block_hauler.jsx",["116"],"/*  block_hauler.jsx\r\n    Hauls items around the map, allowing items to be moved around the map\r\n    For the game Settlers & Warlords\r\n*/\r\n\r\nimport React from \"react\";\r\nimport {imageURL} from \"./App.js\";\r\nimport {game} from \"./game.jsx\";\r\nimport {blockHasWorkerPriority} from \"./blockHasWorkerPriority.jsx\";\r\nimport {blockMovesWorkers} from \"./blockMovesWorkers.jsx\";\r\n\r\nexport function Hauler(mapTile) {\r\n    let b = {\r\n        id: game.getNextBlockId(),\r\n        name: \"Hauler\",\r\n        descr: `No matter how well you organize your factory, you'll still need to transport items around. Workers can carry most\r\n                items, long as they're not too heavy`,\r\n        usage: `Place Haulers near blocks providing items to move. Select an output, then click the block to send items to.`,\r\n        image: imageURL +'hauler.png',\r\n        progressBar: 0,\r\n        progressBarColor: 'black',\r\n        progressBarMax: 1,\r\n        tileX: parseInt(mapTile.x),\r\n        tileY: parseInt(mapTile.y),\r\n        carrying: null,\r\n        linkItem: '',   // Currently selected item, being used to set up a matching block to send it to. This isn't saved to the database,\r\n                        // since it's an interface setting\r\n        receivedId: -1, // Tracks which block we took an item from. If the item doesn't get delivered, we put it back here (whether it normally fits or not)\r\n        targetList: [], // Keeps track of which items can be taken to which blocks. Structure:\r\n            // destId - Which block we take the item to\r\n            // itemName - name of the item that can be transferred\r\n        mode: 'idle',\r\n        possibleOutputs: ()=>[],      // This doesn't output any items\r\n        willOutput: itemName => false, \r\n        hasItem: namesList => false, // This doesn't return any items\r\n        getItem: name => null,        // This doesn't return any items\r\n        getItemFrom: list => null,    // This doesn't return any items\r\n        findItems: namesList => null,\r\n        willAccept: item=>false,\r\n        takeItem: item=>false,\r\n        fetchItem: itemId=>{\r\n            // This block handles this much differently. We only have a carrying slot, and nothing else\r\n            if(b.carrying===null) return null;\r\n            if(b.carrying.id===itemId) return b.carrying;\r\n            return null;\r\n        },\r\n        destroyItem: itemId=>{\r\n            if(b.carrying===null) return false;\r\n            if(b.carrying.id!==itemId) return false;\r\n            b.carrying = null;\r\n            // This one gets a bit more complicated, if we were carrying something somewhere\r\n            if(b.mode==='send') {\r\n                b.changeMoverDirection();\r\n                b.changeMoverImage(imageURL+'movingEmpty.png');\r\n                b.mode = 'gohome';\r\n            }\r\n            return true;\r\n        },\r\n        update: ()=>{\r\n            if(game.workPoints<=0) return; // Can't do anything here without work points\r\n            switch(b.mode) {\r\n                case 'idle':\r\n                    // Hauler is stationed at the start block. Check the list of targets for one to send an item to\r\n                    b.targetList.some(targ=>{\r\n                        // Instead of trying to determine the source block for an item, search all nearby blocks to see if\r\n                        // any can output the desired item\r\n                        let found = game.getNeighbors(b.tileX, b.tileY).find(n=>{\r\n                            return n.willOutput(targ.itemName);\r\n                        });\r\n                        if(typeof(found)==='undefined') return false;   // Note: array.find() returns undefined when it gets no match - not null\r\n                        \r\n                        // Next, see if the destination block will accept this item\r\n                        let destSlot = game.blocks.findIndex(block=>block.id===targ.destId);\r\n                        if(destSlot===-1) {\r\n                            console.log('Error in hauler: target block (id='+ targ.destId +') not found');\r\n                            return false;\r\n                        }\r\n                        // Now, see if this block can accept the item we intend to send\r\n                        if(!game.blocks[destSlot].willAccept({name:targ.itemName, group:'item'})) return false;\r\n                        \r\n                        // This transfer is acceptable. Let's begin!\r\n                        game.workPoints--;\r\n                        b.carrying = found.getItem(targ.itemName);\r\n                        game.moveItem(b.carrying.id, b.id);\r\n                        b.receivedId = found.id;\r\n                        b.mode = 'send';\r\n                        b.startMove(game.blocks[destSlot], imageURL+'movingItem.png');\r\n\r\n                        return true;\r\n                    });\r\n                break;\r\n                case 'send':\r\n                    game.workPoints--;\r\n                    if(b.takeStep()) {\r\n                        // We need the targetId, which is stored in blockMovesWorkers. Get the actual block slot\r\n                        let blockSlot = game.blocks.findIndex(c=>c.id===b.targetId);\r\n                        if(blockSlot===-1) {\r\n                            console.log('Error in block_hauler: target block doesnt exist (was it deleted?)');\r\n                        }else{\r\n                            if(game.blocks[blockSlot].takeItem(b.carrying)) {\r\n                                game.moveItem(b.carrying.id, game.blocks[blockSlot].id);\r\n                                b.carrying = null;\r\n                                b.changeMoverImage(imageURL+'movingEmpty.png');\r\n                            }else{\r\n                                console.log('Notice in block_hauler: target block refused item (is inventory full?)');\r\n                            }\r\n                        }\r\n                        b.changeMoverDirection();\r\n                        b.mode = 'gohome';\r\n                    }\r\n                break;\r\n                case 'gohome':\r\n                    game.workPoints--;\r\n                    if(b.takeStep()) {\r\n                        // We've made it back home!\r\n                        // If we're still holding an item, give it back to the block we got it from\r\n                        if(b.carrying!==null) {\r\n                            let sourSlot = game.blocks.find(e=>e.id===b.receivedId);\r\n                            if(sourSlot===-1) { // Well... nobody is here now. Give up the item\r\n                                console.log('Error in block_hauler: rejected item has no home block. Item will be lost');\r\n                            }else{\r\n                                game.blocks[sourSlot].onhand.push(b.carrying);\r\n                                game.moveItem(b.carrying.id, game.blocks[sourSlot].id);\r\n                            }\r\n                            b.carrying = null;\r\n                        }\r\n                        b.endMove();\r\n                        b.mode = 'idle';\r\n                    }\r\n                break;\r\n            }\r\n        },\r\n        SidePanel: ()=>{\r\n            const Priority = b.ShowPriority;\r\n\r\n            const [selectMsg, setSelectMsg] = React.useState(false);\r\n\r\n            // Start with a list of all the items we can send from here\r\n            let items = b.availableItems();\r\n\r\n            return <>\r\n                <Priority />\r\n                {/*Display each item. While doing so, gather all existing targets for this item and display it*/}\r\n                {(items.length===0)?(\r\n                    'Place next to blocks with an output'\r\n                ):(\r\n                    items.map((ele,key) =>{\r\n                        let existings = b.targetList.filter(e=>e.itemName===ele);\r\n                        return (\r\n                            <div key={key}>\r\n                                <p className=\"singleline\">\r\n                                    {ele}\r\n                                    <button onClick={()=>{\r\n                                        game.pickMode = true;\r\n                                        b.linkItem = ele;\r\n                                        setSelectMsg(true);\r\n                                    }}>\r\n                                        Add Target\r\n                                    </button>\r\n                                </p>\r\n                                {existings.length===0?'':existings.map((red,k2)=>{\r\n                                    let block = game.blocks.find(y=>y.id===red.destId);\r\n                                    if(typeof(block)==='undefined') {\r\n                                        return <p className=\"singleline\">Invalid Entry</p>;\r\n                                    }\r\n                                    return (\r\n                                        <p key={k2} className=\"singleline\" style={{marginLeft:20}}>\r\n                                            {block.name} ({b.distanceTo(block)}) <button>X</button>\r\n                                        </p>\r\n                                    );\r\n                                })}\r\n                            </div>\r\n                        );\r\n                    })\r\n                )}\r\n                {selectMsg?(\r\n                    <p>Click a map block to enable item transfers</p>\r\n                ):''}\r\n            </>;\r\n        },\r\n        availableItems: ()=>{\r\n            // Generates a list of all available items from the neighboring blocks of this one\r\n            let lists = game.getNeighbors(b.tileX, b.tileY).map(n=>{\r\n                if(typeof(n.possibleOutputs)!=='undefined') {\r\n                    return n.possibleOutputs();\r\n                }\r\n                return [];\r\n            });\r\n            if(lists.length===0) return []; // This block doesn't have any neighbors!\r\n\r\n            // Lists gives us a 2D array, with possible duplicate items. Go through and only add items we don't already have\r\n            let out = [];\r\n            for(let y=0; y<lists.length; y++) {\r\n                for(let x=0; x<lists[y].length; x++) {\r\n                    if(!out.includes(lists[y][x])) out.push(lists[y][x]);\r\n                }\r\n            }\r\n            return out;\r\n        },\r\n        receiveTarget: blockId =>{\r\n            // Called from the LocalMap component. Accepts a building\r\n            console.log('Receiving target id='+ blockId +' for item '+ b.linkItem);\r\n            let blockSlot = game.blocks.findIndex(e=>e.id===blockId);\r\n            if(blockSlot===-1) return console.log('Error in Hauler->receiveTarget: block id ('+ blockId +') gave no results');\r\n            // Ensure this block will accept the selected item\r\n            if(game.blocks[blockSlot].willAccept({name:b.linkItem, group:'item'})) {\r\n                b.targetList.push({\r\n                    destId: blockId,\r\n                    itemName: b.linkItem\r\n                });\r\n                b.linkItem = '';\r\n            }else{\r\n                console.log('Error: block refused item');\r\n            }\r\n        },\r\n        save:()=>{\r\n            return {\r\n                priority: b.priority,\r\n                mode: b.mode,\r\n                carrying: (b.carrying===null)?'none':b.carrying,\r\n                targetId:   b.targetId,\r\n                receivedId: b.receivedId,\r\n                targetList: b.targetList\r\n            };\r\n        },\r\n        load:content=>{\r\n            b.priority   = content.priority;\r\n            b.mode       = content.mode;\r\n            b.targetId   = content.targetId;\r\n            b.carrying   = (content.carrying==='none')?null:content.carrying;\r\n            b.receivedId = content.receivedId;\r\n            b.targetList = content.targetList;\r\n        }\r\n    };\r\n    return Object.assign(b, blockHasWorkerPriority(b), blockMovesWorkers(b));\r\n}","C:\\wamp\\www\\settlerswarlords\\src\\block_butchershop.jsx",[],"C:\\wamp\\www\\settlerswarlords\\src\\App.js",[],"C:\\wamp\\www\\settlerswarlords\\src\\block_strawdryer.jsx",[],"C:\\wamp\\www\\settlerswarlords\\src\\block_rockknapper.jsx",[],"C:\\wamp\\www\\settlerswarlords\\src\\block_leanto.jsx",[],"C:\\wamp\\www\\settlerswarlords\\src\\block_farmerspost.jsx",["117"],"C:\\wamp\\www\\settlerswarlords\\src\\blockHasOutputsPerInput.jsx",[],"C:\\wamp\\www\\settlerswarlords\\src\\game.jsx",[],"C:\\wamp\\www\\settlerswarlords\\src\\blockHasMultipleOutputs.jsx",[],"C:\\wamp\\www\\settlerswarlords\\src\\block_recycler.jsx",[],"C:\\wamp\\www\\settlerswarlords\\src\\blockDeletesWithItems.jsx",[],"C:\\wamp\\www\\settlerswarlords\\src\\reportWebVitals.js",[],"C:\\wamp\\www\\settlerswarlords\\src\\block_foragepost.jsx",[],"C:\\wamp\\www\\settlerswarlords\\src\\block_huntingpost.jsx",[],"C:\\wamp\\www\\settlerswarlords\\src\\DanInput.jsx",[],"C:\\wamp\\www\\settlerswarlords\\src\\DanCommon.js",[],"C:\\wamp\\www\\settlerswarlords\\src\\blockSharesOutputs.jsx",[],"C:\\wamp\\www\\settlerswarlords\\src\\blockRunsFire.jsx",[],{"ruleId":"118","severity":1,"message":"119","line":108,"column":52,"nodeType":"120","messageId":"121","endLine":108,"endColumn":58},{"ruleId":"122","replacedBy":"123"},{"ruleId":"124","replacedBy":"125"},{"ruleId":"126","severity":1,"message":"127","line":48,"column":21,"nodeType":"128","messageId":"129","endLine":48,"endColumn":23},{"ruleId":"126","severity":1,"message":"130","line":100,"column":19,"nodeType":"128","messageId":"129","endLine":100,"endColumn":21},{"ruleId":"126","severity":1,"message":"130","line":207,"column":26,"nodeType":"128","messageId":"129","endLine":207,"endColumn":28},{"ruleId":"126","severity":1,"message":"127","line":209,"column":70,"nodeType":"128","messageId":"129","endLine":209,"endColumn":72},{"ruleId":"131","severity":1,"message":"132","line":61,"column":13,"nodeType":"133","messageId":"134","endLine":131,"endColumn":14},{"ruleId":"131","severity":1,"message":"132","line":197,"column":13,"nodeType":"133","messageId":"134","endLine":212,"endColumn":14},"valid-typeof","Invalid typeof comparison value.","Literal","invalidValue","no-native-reassign",["135"],"no-negated-in-lhs",["136"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","Expected '!==' and instead saw '!='.","default-case","Expected a default case.","SwitchStatement","missingDefaultCase","no-global-assign","no-unsafe-negation"]
>>>>>>> 569c683095e7fa94284ec17b01dbef7272b316fe
